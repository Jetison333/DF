//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from coll.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class collParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, DEFINITION=6, BIN_OP=7, BUILT_IN=8, 
		TERM=9, WS=10, CM=11;
	public const int
		RULE_start = 0, RULE_format = 1, RULE_constraint = 2, RULE_object = 3, 
		RULE_set = 4, RULE_list = 5;
	public static readonly string[] ruleNames = {
		"start", "format", "constraint", "object", "set", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "DEFINITION", "BIN_OP", "BUILT_IN", 
		"TERM", "WS", "CM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "coll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static collParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public collParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public collParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(collParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			set();
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext[] format() {
			return GetRuleContexts<FormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format(int i) {
			return GetRuleContext<FormatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CM() { return GetTokens(collParser.CM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CM(int i) {
			return GetToken(collParser.CM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(collParser.TERM, 0); }
		public FormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitFormat(this);
		}
	}

	[RuleVersion(0)]
	public FormatContext format() {
		FormatContext _localctx = new FormatContext(Context, State);
		EnterRule(_localctx, 2, RULE_format);
		int _la;
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 15;
				Match(T__0);
				State = 16;
				format();
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CM) {
					{
					{
					State = 17;
					Match(CM);
					State = 18;
					format();
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 24;
				Match(T__1);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				Match(T__2);
				State = 27;
				format();
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CM) {
					{
					{
					State = 28;
					Match(CM);
					State = 29;
					format();
					}
					}
					State = 34;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 35;
				Match(T__3);
				}
				break;
			case TERM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37;
				Match(TERM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(collParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION() { return GetToken(collParser.DEFINITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 4, RULE_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(TERM);
			State = 41;
			Match(DEFINITION);
			State = 42;
			@object(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(collParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILT_IN() { return GetToken(collParser.BUILT_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_OP() { return GetToken(collParser.BIN_OP, 0); }
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		return @object(0);
	}

	private ObjectContext @object(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ObjectContext _localctx = new ObjectContext(Context, _parentState);
		ObjectContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_object, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 45;
				set();
				}
				break;
			case T__2:
				{
				State = 46;
				list();
				}
				break;
			case TERM:
				{
				State = 47;
				Match(TERM);
				}
				break;
			case BUILT_IN:
				{
				State = 48;
				Match(BUILT_IN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 56;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ObjectContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_object);
					State = 51;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 52;
					Match(BIN_OP);
					State = 53;
					@object(6);
					}
					} 
				}
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format() {
			return GetRuleContext<FormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CM() { return GetTokens(collParser.CM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CM(int i) {
			return GetToken(collParser.CM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERM() { return GetTokens(collParser.TERM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM(int i) {
			return GetToken(collParser.TERM, i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 8, RULE_set);
		int _la;
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(T__0);
				State = 60;
				format();
				State = 61;
				Match(T__4);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TERM) {
					{
					State = 62;
					constraint();
					}
				}

				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CM) {
					{
					{
					State = 65;
					Match(CM);
					State = 66;
					constraint();
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 72;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				Match(T__0);
				State = 75;
				Match(TERM);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CM) {
					{
					{
					State = 76;
					Match(CM);
					State = 77;
					Match(TERM);
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 83;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERM() { return GetTokens(collParser.TERM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM(int i) {
			return GetToken(collParser.TERM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CM() { return GetTokens(collParser.CM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CM(int i) {
			return GetToken(collParser.CM, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcollListener typedListener = listener as IcollListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 10, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__2);
			State = 87;
			Match(TERM);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CM) {
				{
				{
				State = 88;
				Match(CM);
				State = 89;
				Match(TERM);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return object_sempred((ObjectContext)_localctx, predIndex);
		}
		return true;
	}
	private bool object_sempred(ObjectContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,11,98,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,5,1,20,8,1,10,1,12,1,23,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
		1,31,8,1,10,1,12,1,34,9,1,1,1,1,1,1,1,3,1,39,8,1,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,3,3,50,8,3,1,3,1,3,1,3,5,3,55,8,3,10,3,12,3,58,9,3,1,4,1,
		4,1,4,1,4,3,4,64,8,4,1,4,1,4,5,4,68,8,4,10,4,12,4,71,9,4,1,4,1,4,1,4,1,
		4,1,4,1,4,5,4,79,8,4,10,4,12,4,82,9,4,1,4,3,4,85,8,4,1,5,1,5,1,5,1,5,5,
		5,91,8,5,10,5,12,5,94,9,5,1,5,1,5,1,5,0,1,6,6,0,2,4,6,8,10,0,0,104,0,12,
		1,0,0,0,2,38,1,0,0,0,4,40,1,0,0,0,6,49,1,0,0,0,8,84,1,0,0,0,10,86,1,0,
		0,0,12,13,3,8,4,0,13,14,5,0,0,1,14,1,1,0,0,0,15,16,5,1,0,0,16,21,3,2,1,
		0,17,18,5,11,0,0,18,20,3,2,1,0,19,17,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,
		0,21,22,1,0,0,0,22,24,1,0,0,0,23,21,1,0,0,0,24,25,5,2,0,0,25,39,1,0,0,
		0,26,27,5,3,0,0,27,32,3,2,1,0,28,29,5,11,0,0,29,31,3,2,1,0,30,28,1,0,0,
		0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,0,34,32,1,0,0,
		0,35,36,5,4,0,0,36,39,1,0,0,0,37,39,5,9,0,0,38,15,1,0,0,0,38,26,1,0,0,
		0,38,37,1,0,0,0,39,3,1,0,0,0,40,41,5,9,0,0,41,42,5,6,0,0,42,43,3,6,3,0,
		43,5,1,0,0,0,44,45,6,3,-1,0,45,50,3,8,4,0,46,50,3,10,5,0,47,50,5,9,0,0,
		48,50,5,8,0,0,49,44,1,0,0,0,49,46,1,0,0,0,49,47,1,0,0,0,49,48,1,0,0,0,
		50,56,1,0,0,0,51,52,10,5,0,0,52,53,5,7,0,0,53,55,3,6,3,6,54,51,1,0,0,0,
		55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,7,1,0,0,0,58,56,1,0,0,0,59,
		60,5,1,0,0,60,61,3,2,1,0,61,63,5,5,0,0,62,64,3,4,2,0,63,62,1,0,0,0,63,
		64,1,0,0,0,64,69,1,0,0,0,65,66,5,11,0,0,66,68,3,4,2,0,67,65,1,0,0,0,68,
		71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,72,
		73,5,2,0,0,73,85,1,0,0,0,74,75,5,1,0,0,75,80,5,9,0,0,76,77,5,11,0,0,77,
		79,5,9,0,0,78,76,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,
		83,1,0,0,0,82,80,1,0,0,0,83,85,5,2,0,0,84,59,1,0,0,0,84,74,1,0,0,0,85,
		9,1,0,0,0,86,87,5,3,0,0,87,92,5,9,0,0,88,89,5,11,0,0,89,91,5,9,0,0,90,
		88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,
		92,1,0,0,0,95,96,5,4,0,0,96,11,1,0,0,0,10,21,32,38,49,56,63,69,80,84,92
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
