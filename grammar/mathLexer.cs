//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from math.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class mathLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, DEFINITION=7, BIN_OP=8, 
		BUILT_IN=9, TERM=10, WS=11, CM=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "DEFINITION", "BIN_OP", 
		"BUILT_IN", "TERM", "WS", "CM"
	};


	public mathLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public mathLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'where'", "'{'", "'}'", "'('", "')'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "DEFINITION", "BIN_OP", "BUILT_IN", 
		"TERM", "WS", "CM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "math.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static mathLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,122,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,
		1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,3,6,53,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,77,8,7,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,107,8,8,1,9,4,9,110,8,9,11,9,12,9,111,1,10,
		4,10,115,8,10,11,10,12,10,116,1,10,1,10,1,11,1,11,0,0,12,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,3,4,0,46,46,48,57,65,90,
		97,122,3,0,9,10,13,13,32,32,1,0,44,44,132,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,31,
		1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,52,1,0,
		0,0,15,76,1,0,0,0,17,106,1,0,0,0,19,109,1,0,0,0,21,114,1,0,0,0,23,120,
		1,0,0,0,25,26,5,119,0,0,26,27,5,104,0,0,27,28,5,101,0,0,28,29,5,114,0,
		0,29,30,5,101,0,0,30,2,1,0,0,0,31,32,5,123,0,0,32,4,1,0,0,0,33,34,5,125,
		0,0,34,6,1,0,0,0,35,36,5,40,0,0,36,8,1,0,0,0,37,38,5,41,0,0,38,10,1,0,
		0,0,39,40,5,124,0,0,40,12,1,0,0,0,41,42,5,105,0,0,42,53,5,115,0,0,43,44,
		5,105,0,0,44,53,5,110,0,0,45,53,5,61,0,0,46,47,5,115,0,0,47,48,5,117,0,
		0,48,49,5,98,0,0,49,50,5,115,0,0,50,51,5,101,0,0,51,53,5,116,0,0,52,41,
		1,0,0,0,52,43,1,0,0,0,52,45,1,0,0,0,52,46,1,0,0,0,53,14,1,0,0,0,54,55,
		5,117,0,0,55,56,5,110,0,0,56,57,5,105,0,0,57,58,5,111,0,0,58,77,5,110,
		0,0,59,60,5,105,0,0,60,61,5,110,0,0,61,62,5,116,0,0,62,63,5,101,0,0,63,
		64,5,114,0,0,64,65,5,115,0,0,65,66,5,101,0,0,66,67,5,99,0,0,67,68,5,116,
		0,0,68,69,5,105,0,0,69,70,5,111,0,0,70,77,5,110,0,0,71,72,5,99,0,0,72,
		73,5,114,0,0,73,74,5,111,0,0,74,75,5,115,0,0,75,77,5,115,0,0,76,54,1,0,
		0,0,76,59,1,0,0,0,76,71,1,0,0,0,77,16,1,0,0,0,78,79,5,115,0,0,79,80,5,
		101,0,0,80,107,5,116,0,0,81,82,5,108,0,0,82,83,5,105,0,0,83,84,5,115,0,
		0,84,107,5,116,0,0,85,86,5,103,0,0,86,87,5,114,0,0,87,88,5,97,0,0,88,89,
		5,112,0,0,89,107,5,104,0,0,90,91,5,119,0,0,91,92,5,101,0,0,92,93,5,105,
		0,0,93,94,5,103,0,0,94,95,5,104,0,0,95,96,5,116,0,0,96,97,5,101,0,0,97,
		98,5,100,0,0,98,99,5,71,0,0,99,100,5,114,0,0,100,101,5,97,0,0,101,102,
		5,112,0,0,102,107,5,104,0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,107,
		5,116,0,0,106,78,1,0,0,0,106,81,1,0,0,0,106,85,1,0,0,0,106,90,1,0,0,0,
		106,103,1,0,0,0,107,18,1,0,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,111,
		1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,20,1,0,0,0,113,115,7,1,0,0,
		114,113,1,0,0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,
		1,0,0,0,118,119,6,10,0,0,119,22,1,0,0,0,120,121,7,2,0,0,121,24,1,0,0,0,
		6,0,52,76,106,111,116,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
